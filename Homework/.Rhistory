cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.2,0.8), c(0,0), c(1,1), 10^-3)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 1 # check if meet converging criteria
i <- 1 # counter
while(if_pass){
sum_pie <- sapply(1:length(w),
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w)>eps)*
prod((mu_new - mu)>eps)*
prod((sigma_new - sigma)>eps)
i <- i + 1
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-2,2), c(1,1), 10^-3)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 1 # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w)>eps)*
prod((mu_new - mu)>eps)*
prod((sigma_new - sigma)>eps)
i <- i + 1
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-2,2), c(1,1), 10^-3)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w)>eps)*
prod((mu_new - mu)>eps)*
prod((sigma_new - sigma)>eps)
i <- i + 1
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-2,2), c(1,1), 10^-1)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w)>eps)*
prod((mu_new - mu)>eps)*
prod((sigma_new - sigma)>eps)
i <- i + 1
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-1)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-1)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
print(c(w,mu,sigma))
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-1)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
print(c(w,mu,sigma))
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-1)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
print(c(w,mu,sigma))
}
cat('A total of ',i,' iterations.')
return(list("w" = w_new, "mu" = mu_new, "sigma" = sigma_new))
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
print(c(w,mu,sigma))
}
cat('A total of ',i,' iterations.\n')
}
fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
print(c(w,mu,sigma))
}
cat('A total of ',i,' iterations.\n')
}
results <- fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
results
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
}
cat('A total of ',i,' iterations.\n')
}
results <- fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
results
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
}
cat('A total of ',i,' iterations.\n')
return(list('w' = w, 'mu' = mu, 'sigma' = sigma))
}
results <- fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
results
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
}
cat('A total of ',i,' iterations.\n')
return(list('w' = w, 'mu' = mu, 'sigma' = sigma))
}
results <- fit_em(x, c(0.4,0.6), c(-4,6), c(2,4), 10^-6)
results
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
}
cat('A total of ',i,' iterations.\n')
return(list('w' = w, 'mu' = mu, 'sigma' = sigma))
}
results <- fit_em(X, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
results
rm(list=ls()) #clears your workspace
rmixt <- function(n, w, mu, sigma) {
k <- sample(1:length(w), n, replace = TRUE, prob = w)
rnorm(n, mean = mu[k], sd = sigma[k])
}
X <- rmixt(10^4, c(0.5,0.5), c(-5,5), c(2,5))
hist(X)
dmixt <- function(x, w, mu, sigma) {
sapply(x, FUN=function(x_) sum(w * dnorm(x_, mu, sigma)))
}
X <- sort(X)
d <- dmixt(X, c(0.5,0.5), c(-5,5), c(2,5))
plot(X, d, type = 'l')
fit_em <- function(x, w, mu, sigma, eps) {
if_pass <- 0 # check if meet converging criteria
i <- 0       # counter
while(!if_pass){
sum_pie <- sapply(1:length(w),   # sum pi for i from 1 to n
FUN=function(k) sum(w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
w_new <- sum_pie/sum(sum_pie)
sum_Xpie <- sapply(1:length(w),
FUN=function(k) sum(x*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
mu_new <- sum_Xpie/sum_pie
sum_MSEpie <- sapply(1:length(w),
FUN=function(k) sum((x-mu[k])^2*w[k]*dnorm(x, mu[k], sigma[k])/dmixt(x, w, mu, sigma)))
sigma_new <- sqrt(sum_MSEpie/sum_pie)
if_pass <- prod((w_new - w) < eps)*
prod((mu_new - mu) < eps)*
prod((sigma_new - sigma) < eps)
i <- i + 1
w <- w_new
mu <- mu_new
sigma <- sigma_new
}
cat('A total of ',i,' iterations.\n')
return(list('w' = w, 'mu' = mu, 'sigma' = sigma))
}
#results <- fit_em(X, c(0.4,0.6), c(-4,6), c(2,4), 10^-3)
#results
set.seed(5)
w_true <- c(0.2, 0.3, 0.5)
mu_true <- c(0.5, 2, 4)
sigma_true <- c(0.5, 1, 0.5)
X <- rmixt(1000, w_true, mu_true, sigma_true)
results <- fit_em(X, w_true, mu_true, sigma_true, 10^-3)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
### sort X
X <- sort(X)
results <- fit_em(X, w_true, mu_true, sigma_true, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
check_results <- function(X, w, mu, sigma\){
check_results <- function(X, w, mu, sigma){
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
}
plot(X, d, type = 'l')
text(results)
plot(X, d, type = 'l')
text('results')
?text
plot(X, d, type = 'l')
text(1,1,'results')
plot(X, d, type = 'l')
text(1,1,results)
plot(X, d, type = 'l')
mtext(3,results)
plot(X, d, type = 'l')
mtext(results,side=3)
?mtext
check_results <- function(X, w, mu, sigma){
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
}
w <- w_true; mu <- mu_true; sigma <- sigma_true
check_results(X, w, mu, sigma)
w <- w_true; mu <- mu_true; sigma <- sigma_true
results <- fit_em(X, w, mu, sigma, 10^-3)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
w <- w_true; mu <- mu_true; sigma <- sigma_true
results <- fit_em(X, w, mu, sigma, 10^-3)
cat(results)
w <- w_true; mu <- mu_true; sigma <- sigma_true
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
w <- rep(1/3, 3); mu <- rep(mean(X), 3); sigma <- rep(sd(X), 3)
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
w <- rep(1/3, 3); mu <- mean(X) + sd(X) * c(-1, 0, 1); sigma <- rep(sd(X), 3)
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
clusters <- kmeans(X, 3)$cluster
w <- table(clusters) / length(X)
mu <- tapply(X, clusters, mean)
sigma <- tapply(X, clusters, sd)
results <- fit_em(X, w, mu, sigma, 10^-3)
print(results)
d <- dmixt(X, results$w, results$mu, results$sigma)
plot(X, d, type = 'l')
set.seed(5)
X <- rexp(500)
Y <- 2 + 0.5 * X + rnorm(500)
dat <- data.frame(Y, X)
fit <- lm(Y ~ X, data = dat)
confint(fit)
# Empirical bootstrap algorithm
B <- 1000
set.seed(1000)
M1 <- model.matrix(fit)
beta_stars <- t(sapply(1:B, function(b){
y <- fit$fitted  + sample(residuals(fit), replace = TRUE)
bstar <- coefficients(lm(y ~ M1 - 1, data = dat))
return(t(bstar))
}))
se_boot <- apply(beta_stars, 2, sd) # Bootstrap se's of the coefficients
c(results$w, results$mu, results$sigma)
se_boot
beta_stars
se_boot
fit$coefficients
se_boot * qnorm(c(0.05, 0.95))
rep(se_boot,2)
rep(se_boot,2) * qnorm(c(0.025, 0.025, 0.975, 0.975))
fit$coefficients
rep(fit$coefficients ,2)
#### Empirical bootstrap algorithm
B <- 1000
set.seed(1000)
M1 <- model.matrix(fit)
beta_stars <- t(sapply(1:B, function(b){
y <- fit$fitted  + sample(residuals(fit), replace = TRUE) # empirical
bstar <- coefficients(lm(y ~ M1 - 1, data = dat))
return(t(bstar))
}))
### construct the confident intervals
se_boot <- apply(beta_stars, 2, sd) # Bootstrap se's of the coefficients
rep(fit$coefficients, 2) + # estimate
rep(se_boot,2) * qnorm(c(0.025, 0.025, 0.975, 0.975))
results <- rep(fit$coefficients, 2) + # estimate
rep(se_boot,2) * qnorm(c(0.025, 0.025, 0.975, 0.975))
names(results)
#### Empirical bootstrap algorithm
B <- 1000
set.seed(1000)
M1 <- model.matrix(fit)
beta_stars <- t(sapply(1:B, function(b){
y <- fit$fitted  + sample(residuals(fit), replace = TRUE) # empirical
bstar <- coefficients(lm(y ~ M1 - 1, data = dat))
return(t(bstar))
}))
### construct the confident intervals
se_boot <- apply(beta_stars, 2, sd) # Bootstrap se's of the coefficients
results <- rep(fit$coefficients, 2) + # estimate
rep(se_boot,2) * qnorm(c(0.025, 0.025, 0.975, 0.975))
names(results) <- c('int_low', 'beta_low', 'int_high', 'beta_high')
results
